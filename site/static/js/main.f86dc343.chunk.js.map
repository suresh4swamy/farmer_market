{"version":3,"sources":["component/Login.jsx","serviceWorker.js","index.js"],"names":["Login","state","userid","userpwd","handleUserId","event","_this","setState","target","value","handleUserPwd","handleSubmit","preventDefault","toggleResetPswd","$","toggle","toggleSignUp","react_default","a","createElement","id","className","style","textAlign","type","placeholder","required","autoFocus","this","onChange","href","onClick","action","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_component_Login","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f86dc343.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Login.scss';\nimport $ from 'jquery';\n\nclass Login extends Component {\n\n  state = {\n    userid: '',\n    userpwd: ''\n  }\n\n  handleUserId = event => {\n    this.setState({ userid: event.target.value });\n  }\n  handleUserPwd = event => {\n    this.setState({ userpwd: event.target.value });\n  }\n  handleSubmit = event => {\n    event.preventDefault();\n  }\n  toggleResetPswd = event => {\n\tevent.preventDefault();\n    $('#logreg-forms .form-signin').toggle() // display:block or none\n    $('#logreg-forms .form-reset').toggle() // display:block or none\n  }\n  toggleSignUp = event => {\n    event.preventDefault();\n    $('#logreg-forms .form-signin').toggle(); // display:block or none\n    $('#logreg-forms .form-signup').toggle(); // display:block or none\n  }\n\n  render() {\n    return (\n      <div id=\"logreg-forms\">\n        <form className=\"form-signin\">\n            <h1 className=\"h3 mb-3 font-weight-normal\" style={{textAlign: \"center\"}}> Sign in</h1>\n            <div className=\"social-login\">\n                <button className=\"btn facebook-btn social-btn\" type=\"button\"><span><i className=\"fab fa-facebook-f\"></i> Sign in with Facebook</span> </button>\n                <button className=\"btn google-btn social-btn\" type=\"button\"><span><i className=\"fab fa-google-plus-g\"></i> Sign in with Google+</span> </button>\n            </div>\n            <p style={{textAlign: \"center\"}}> OR  </p>\n            <div className=\"input-group\">\n              <input type=\"email\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email address\" required=\"\" autoFocus=\"\" value={this.state.userid} onChange={this.handleUserId}/>\n            </div>\n\n            <div className=\"input-group\">\n              <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required=\"\"  value={this.state.userpwd} onChange={this.handleUserPwd}/>\n            </div>\n\n            <div className=\"input-group\">\n              <button className=\"btn btn-md btn-rounded btn-block form-control submit\" type=\"submit\"><i className=\"fas fa-sign-in-alt\"></i> Sign in</button>\n            </div>\n\n            <a href=\"#\" id=\"forgot_pswd\" onClick={this.toggleResetPswd}>Forgot password?</a>\n            <hr />\n            {/* <!-- <p>Don't have an account!</p>  --> */}\n            <button className=\"btn btn-primary btn-block\" type=\"button\" id=\"btn-signup\" onClick={this.toggleSignUp}><i className=\"fas fa-user-plus\"></i> Sign up New Account</button>\n            </form>\n\n            <form action=\"#\" className=\"form-reset\">\n                <input type=\"email\" id=\"resetEmail\" className=\"form-control\" placeholder=\"Email address\" required=\"\" autoFocus=\"\" />\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">Reset Password</button>\n                <a href=\"#\" id=\"cancel_reset\" onClick={this.toggleResetPswd}><i className=\"fas fa-angle-left\"></i> Back</a>\n            </form>\n\n            <form action=\"#\" className=\"form-signup\">\n                <div className=\"social-login\">\n                    <button className=\"btn facebook-btn social-btn\" type=\"button\"><span><i className=\"fab fa-facebook-f\"></i> Sign up with Facebook</span> </button>\n                  </div>\n                  <div className=\"social-login\">\n                    <button className=\"btn google-btn social-btn\" type=\"button\"><span><i className=\"fab fa-google-plus-g\"></i> Sign up with Google+</span> </button>\n                </div>\n\n                <p style={{textAlign: \"center\"}}>OR</p>\n\n                <input type=\"text\" id=\"user-name\" className=\"form-control\" placeholder=\"Full name\" required=\"\" autoFocus=\"\" />\n                <input type=\"email\" id=\"user-email\" className=\"form-control\" placeholder=\"Email address\" required autoFocus=\"\" />\n                <input type=\"password\" id=\"user-pass\" className=\"form-control\" placeholder=\"Password\" required autoFocus=\"\" />\n                <input type=\"password\" id=\"user-repeatpass\" className=\"form-control\" placeholder=\"Confirm Password\" required autoFocus=\"\" />\n\n\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t<button className=\"btn btn-md btn-block submit\" type=\"submit\"><i className=\"fas fa-user-plus\"></i> Sign Up</button>\n\t\t\t\t</div>\n\n                <a href=\"#\" id=\"cancel_signup\" onClick={this.toggleSignUp}><i className=\"fa fa-angle-left\"></i> Back</a>\n            </form>\n            <br />\n    </div>\n    );\n  }\n}\n\nexport default Login;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.scss';\n\nimport Login from './component/Login';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}