{"version":3,"sources":["component/Login.jsx","serviceWorker.js","index.js"],"names":["Login","state","userid","userpwd","handleUserId","event","_this","setState","target","value","handleUserPwd","handleSubmit","preventDefault","toggleResetPswd","$","toggle","toggleSignUp","responseGoogle","response","console","log","react_default","a","createElement","id","className","style","textAlign","google_login_default","clientId","buttonText","onSuccess","onFailure","cookiePolicy","type","placeholder","required","autoFocus","this","onChange","href","onClick","action","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_component_Login","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51c3f9b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Login.scss';\r\nimport GoogleLogin from 'react-google-login';\r\n// import FacebookLogin from 'react-facebook-login';\r\nimport $ from 'jquery';\r\n\r\n\r\nclass Login extends Component {\r\n\r\n  state = {\r\n    userid: '',\r\n    userpwd: ''\r\n  }\r\n\r\n  handleUserId = event => {\r\n    this.setState({ userid: event.target.value });\r\n  }\r\n  handleUserPwd = event => {\r\n    this.setState({ userpwd: event.target.value });\r\n  }\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n  }\r\n  toggleResetPswd = event => {\r\n    event.preventDefault();\r\n    $('#logreg-forms .form-signin').toggle() // display:block or none\r\n    $('#logreg-forms .form-reset').toggle() // display:block or none\r\n  }\r\n  toggleSignUp = event => {\r\n    event.preventDefault();\r\n    $('#logreg-forms .form-signin').toggle(); // display:block or none\r\n    $('#logreg-forms .form-signup').toggle(); // display:block or none\r\n  }\r\n\r\n  render() {\r\n    const responseFacebook = (response) => {\r\n      console.log(response);\r\n    }\r\n    const responseGoogle = (response) => {\r\n      console.log(response);\r\n    }\r\n    return (\r\n      <div id=\"logreg-forms\">\r\n        <form className=\"form-signin\">\r\n          <h1 className=\"h3 mb-3 font-weight-normal\" style={{ textAlign: \"center\" }}> Sign in</h1>\r\n          <div className=\"social-login\">\r\n            {/* <FacebookLogin\r\n              appId=\"1088597931155576\"\r\n              autoLoad={true}\r\n              fields=\"name,email,picture\"\r\n              onClick={componentClicked}\r\n              callback={responseFacebook} /> */}\r\n            <GoogleLogin\r\n              clientId=\"798114275164-cktjfs6el9nkvv61kdkqtn8i1paa9bek.apps.googleusercontent.com\"\r\n              buttonText=\"Login\"\r\n              onSuccess={responseGoogle}\r\n              onFailure={responseGoogle}\r\n              cookiePolicy={'single_host_origin'}\r\n            />\r\n            {/* <button className=\"btn facebook-btn social-btn\" type=\"button\"><span><i className=\"fab fa-facebook-f\"></i> Sign in with Facebook</span> </button>\r\n            <button className=\"btn google-btn social-btn\" type=\"button\"><span><i className=\"fab fa-google-plus-g\"></i> Sign in with Google+</span> </button> */}\r\n          </div>\r\n          <p style={{ textAlign: \"center\" }}> OR  </p>\r\n          <div className=\"input-group\">\r\n            <input type=\"email\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email address\" required=\"\" autoFocus=\"\" value={this.state.userid} onChange={this.handleUserId} />\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required=\"\" value={this.state.userpwd} onChange={this.handleUserPwd} />\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <button className=\"btn btn-md btn-rounded btn-block form-control submit\" type=\"submit\"><i className=\"fas fa-sign-in-alt\"></i> Sign in</button>\r\n          </div>\r\n\r\n          <a href=\"#\" id=\"forgot_pswd\" onClick={this.toggleResetPswd}>Forgot password?</a>\r\n          <hr />\r\n          {/* <!-- <p>Don't have an account!</p>  --> */}\r\n          <button className=\"btn btn-primary btn-block\" type=\"button\" id=\"btn-signup\" onClick={this.toggleSignUp}><i className=\"fas fa-user-plus\"></i> Sign up New Account</button>\r\n        </form>\r\n\r\n        <form action=\"#\" className=\"form-reset\">\r\n          <input type=\"email\" id=\"resetEmail\" className=\"form-control\" placeholder=\"Email address\" required=\"\" autoFocus=\"\" />\r\n          <button className=\"btn btn-primary btn-block\" type=\"submit\">Reset Password</button>\r\n          <a href=\"#\" id=\"cancel_reset\" onClick={this.toggleResetPswd}><i className=\"fas fa-angle-left\"></i> Back</a>\r\n        </form>\r\n\r\n        <form action=\"#\" className=\"form-signup\">\r\n          <div className=\"social-login\">\r\n            <button className=\"btn facebook-btn social-btn\" type=\"button\"><span><i className=\"fab fa-facebook-f\"></i> Sign up with Facebook</span> </button>\r\n          </div>\r\n          <div className=\"social-login\">\r\n            <button className=\"btn google-btn social-btn\" type=\"button\"><span><i className=\"fab fa-google-plus-g\"></i> Sign up with Google+</span> </button>\r\n          </div>\r\n\r\n          <p style={{ textAlign: \"center\" }}>OR</p>\r\n\r\n          <input type=\"text\" id=\"user-name\" className=\"form-control\" placeholder=\"Full name\" required=\"\" autoFocus=\"\" />\r\n          <input type=\"email\" id=\"user-email\" className=\"form-control\" placeholder=\"Email address\" required autoFocus=\"\" />\r\n          <input type=\"password\" id=\"user-pass\" className=\"form-control\" placeholder=\"Password\" required autoFocus=\"\" />\r\n          <input type=\"password\" id=\"user-repeatpass\" className=\"form-control\" placeholder=\"Confirm Password\" required autoFocus=\"\" />\r\n\r\n          <div className=\"input-group\">\r\n            <button className=\"btn btn-md btn-block submit\" type=\"submit\"><i className=\"fas fa-user-plus\"></i> Sign Up</button>\r\n          </div>\r\n\r\n          <a href=\"#\" id=\"cancel_signup\" onClick={this.toggleSignUp}><i className=\"fa fa-angle-left\"></i> Back</a>\r\n        </form>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.scss';\r\n\r\nimport Login from './component/Login';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<Login />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}